server:
    port: 8000

spring:
    application:
        name: api-gateway
    cloud:
        gateway:
            globalcors:
                corsConfigurations:
                    '[/ui/v1/**]':
                        #allowedOrigins: "http://localhost:3000"
                        allowedOrigins: "http://twitter.local"
                        exposedHeaders: "page-total-count"
                        allowedHeaders: "*"
                        allowedMethods:
                        - GET
                        - POST
                        - PUT
                        - DELETE
                        - PATCH
                        - OPTIONS
                        - HEAD
            discovery:
                locator:
                    enabled: true
                    lower-case-service-id: true
            routes:
                -   id: topic-service
                    uri: lb://topic-service
                    predicates:
                        - Path=/ui/v1/topics/**
                    filters:
                        - AuthFilter

                -   id: tag-service
                    uri: lb://tag-service
                    predicates:
                        - Path=/ui/v1/tags/**, /api/v1/tags/**
                    filters:
                        - AuthFilter

                -   id: tweet-service
                    uri: lb://tweet-service
                    predicates:
                        - Path=/ui/v1/tweets/**, /api/v1/tweets/**
                    filters:
                        - AuthFilter

                -   id: user-service
                    uri: lb://user-service
                    predicates:
                        - Path=/ui/v1/user/**, /api/v1/user/**, /api/v1/auth/**
                    filters:
                        - name: AuthFilter

                -   id: auth-service
                    uri: lb://user-service
                    predicates:
                        - Path=/ui/v1/auth/**

                -   id: lists-service
                    uri: lb://lists-service
                    predicates:
                        - Path=/ui/v1/lists/**, /api/v1/lists/**
                    filters:
                        - AuthFilter

                -   id: chat-service
                    uri: lb://chat-service
                    predicates:
                        - Path=/ui/v1/chat/**
                    filters:
                        - AuthFilter

                -   id: notification-service
                    uri: lb://notification-service
                    predicates:
                        - Path=/ui/v1/notification/**
                    filters:
                        - AuthFilter

                -   id: websocket-service
                    uri: lb://websocket-service
                    predicates:
                        - Path=/websocket/**, /api/v1/websocket/**

                -   id: image-service
                    uri: lb://image-service
                    predicates:
                        - Path=/api/v1/image/upload, /ui/v1/image/upload
                    filters:
                        - AuthFilter

                -   id: email-service
                    uri: lb://email-service
                    predicates:
                        - Path=/api/v1/email/suggested

    zipkin:
        base-url: http://${ZIPKIN_HOST:localhost}:9411

eureka:
    client:
        service-url:
            defaultZone: ${EUREKA_DEFAULT_ZONE:http://localhost:8761/eureka/}
        fetchRegistry: ${FETCH_REGISTRY:true}
        registerWithEureka: ${REGISTER_WITH_EUREKA:true}
    instance:
        hostname: ${HOST_NAME:${spring.application.name}}  # work on swarm
        instance-id: ${spring.application.name}:${random.uuid}
        leaseRenewalIntervalInSeconds: ${LEASE_RENEWAL_INTERVAl_IN_SECONDS:10}
        leaseExpirationDurationInSeconds: ${LEASE_EXPIRATION_DURATIONIN_SECONDS:20}
        preferIpAddress: ${PREFER_IP_ADDRESS:false}
        
management:
    endpoints:
        web:
          exposure:
                include: 'health'