global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

scrape_configs:
    # Make Prometheus scrape itself for metrics.
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'cadvisor'
      scrape_interval: 5s
      static_configs:
        - targets: ['cadvisor:8080'] 
        
    # Create a job for Docker daemons.
    - job_name: 'dockerswarm-nodes'
      dockerswarm_sd_configs:
        - host: unix:///var/run/docker.sock
          role: nodes
      relabel_configs:
        # Fetch metrics on port 9323.
        - source_labels: [__meta_dockerswarm_node_address]
          target_label: __address__
          replacement: $1:9323
        # Set hostname as instance label
        - source_labels: [__meta_dockerswarm_node_hostname]
          target_label: instance  

    - job_name: "dockerswarm-containers"
      #metrics_path: '/actuator/prometheus'
      dockerswarm_sd_configs:
        - host: unix:///var/run/docker.sock
          role: tasks
      relabel_configs:
        # Only keep containers that have a `prometheus-job` label.
        - source_labels: [__meta_dockerswarm_container_label_prometheus_job]
          regex: .+
          action: keep
        # Check network
        #- source_labels: [__meta_dockerswarm_container_label_prometheus_scrape_network]
        #  regex: monitoring-swarm
        #  action: keep 
        # Set the metrics path the `prometheus-path` label if it exists. ## '/actuator/prometheus'
        - source_labels: [__meta_dockerswarm_task_desired_state]
          regex: running
          action: keep 
        - source_labels: [__meta_dockerswarm_container_label_prometheus_path]
          target_label: __metrics_path__
          regex: (.+)
        # Drop not accessible for Prometheus network 
        - source_labels: [__meta_dockerswarm_network_name]
          regex: '(.*)_spring-swarm'
          action: drop
        - source_labels: [__meta_dockerswarm_network_name]
          regex: '(.*)_postgres-swarm'
          action: drop  
        # Set the target port from the `prometheus-port` label if it exists.
        - source_labels: [__address__, __meta_dockerswarm_container_label_prometheus_port]
          target_label: __address__
          regex: '(.*):(\d+);(\d+)'
          replacement: "${1}:${3}"
        # Change instance name in prometheus
        - source_labels: [__meta_dockerswarm_container_label_prometheus_job]
          target_label: instance


#Temp 
 #https://github.com/prometheus/prometheus/issues/8185
      #  - job_name: "dockerswarm"
      #    dockerswarm_sd_configs:
      #    - host: tcp://docker:2375
      #      role: tasks
      #    relabel_configs:
      #    # Only keep containers that should be running.
      #    - source_labels: [__meta_dockerswarm_task_desired_state]
      #      regex: running
      #      action: keep
      #    # Only keep containers that have a `prometheus.job` service label.
      #    - source_labels: [__meta_dockerswarm_service_label_prometheus_job]
      #      regex: .+
      #      action: keep
      #    # Use the `prometheus.job` swarm label as prometheus job label.
      #    - source_labels: [__meta_dockerswarm_service_label_prometheus_job]
      #      target_label: job
      #    # Set the address for the job if the service has a `prometheus.address` label.
      #    - source_labels: [__meta_dockerswarm_service_label_prometheus_address]
      #      target_label: __address__
      #      regex: (.+)
      #    # Set the metrics path the `prometheus.path` label if it exists.
      #    - source_labels: [__meta_dockerswarm_service_label_prometheus_path]
      #      target_label: __metrics_path__
      #      regex: (.+)
      #    # Set the target port from the `prometheus.port` label if it exists.
      #    - source_labels: [__address__, __meta_dockerswarm_service_label_prometheus_port]
      #      target_label: __address__
      #      regex: '(.*):(\d+);(\d+)'
      #      replacement: "${1}:${3}" 