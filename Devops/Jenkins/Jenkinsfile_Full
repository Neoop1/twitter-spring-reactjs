pipeline {
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
        
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        DOCKER_HUB_USERNAME = 'neoop1' //for image taging 
        PROJECT_NAME= 'twitter-website' //for image taging 
        DOCKER_HOME_FOLDER= '/var/jenkins_home/tools/org.jenkinsci.plugins.docker.commons.tools.DockerTool/docker/bin/'
        BUILD_NUMBER= 'latest'
    }
    stages {
        //stage('clean workspace'){
        //    steps{
        //        cleanWs()
        //    }
        //}
        stage('Checkout from Git'){
            steps{
                git branch: 'microservice', url: 'https://github.com/Neoop1/twitter-spring-reactjs.git'
            }
        }
        stage("Sonarqube Analysis"){
            steps{
                withSonarQubeEnv('sonarqube-server') {
                    sh ''' ${mvn}/bin/mvn clean package verify sonar:sonar -DskipTests -Dsonar.projectName=${PROJECT_NAME} \
                    -Dsonar.projectKey=${PROJECT_NAME} '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }

        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage('Install Dependencies for frontend - for security check') {
            steps {
                sh "npm config set fetch-retry-mintimeout 20000" // slow internet connection
                sh "npm config set fetch-retry-maxtimeout 120000" // slow internet connection
                sh "npm config set legacy-peer-deps true"
                sh "npm install ./frontend/"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./frontend/ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }    


        // after success test build docker with java file  
        stage("Docker Build eureka-server"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./eureka-server/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-eureka-server:${BUILD_NUMBER}"
                       //sh "docker tag netflix neoop1/netflix:latest"
                    }
                }
            }
        }

        stage("Docker Build config-server"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./config-server/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-config-server:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build api-gateway"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./api-gateway/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-api-gateway:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build email-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./email-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-email-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build image-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./image-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-image-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build topic-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./topic-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-topic-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build user-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./user-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-user-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build tweet-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./tweet-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-tweet-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build tag-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./tag-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-tag-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build lists-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./lists-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-lists-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build chat-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./chat-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-chat-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build notification-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./notification-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-notification-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build websocket-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./websocket-service/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-websocket-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build grafana"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./dashboard/grafana/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-grafana:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker Build frontend"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker build ./frontend/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-frontend:${BUILD_NUMBER}"
                    }
                }
            }
        }

       // test docker images with trivy
        stage("TRIVY"){
            steps{
                sh "trivy image ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-frontend:${BUILD_NUMBER} > trivy_frontend_image.txt" 
                sh "trivy image ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-eureka-server:${BUILD_NUMBER} > trivy_microservice_image.txt" 
            }
        }


   
      // after success push docker images   
        stage("Docker PUSH eureka-server"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push  ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-eureka-server:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH config-server"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push  ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-config-server:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH api-gateway"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-api-gateway:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH email-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-email-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH image-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-image-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH topic-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-topic-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH user-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-user-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH tweet-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push  ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-tweet-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH tag-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-tag-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH lists-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-lists-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH chat-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-chat-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH notification-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-notification-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH websocket-service"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push  ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-websocket-service:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH grafana"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-grafana:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Docker PUSH frontend"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh "docker push ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-frontend:${BUILD_NUMBER}"
                    }
                }
            }
        }
                // stage('Deploy to kubernets'){ 
        //     steps{
        //         script{
        //             dir('Kubernetes') {
        //                 withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
        //                         sh 'kubectl apply -f deployment.yml'
        //                         sh 'kubectl apply -f service.yml'
        //                 }   
        //             }
        //         }
        //     }
        // }
    }

    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'test@server',                                
            attachmentsPattern: 'trivyfs.txt,trivy_frontend_image.txt,'
        }
    }
   
}


























