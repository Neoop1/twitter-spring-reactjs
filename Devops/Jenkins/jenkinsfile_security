pipeline {
    // don't use 'agent any'
    // 'agent none' allows the job to continue on the same node with the same files
    // agent none     
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        DOCKER_HUB_USERNAME = 'neoop1' //for image taging 
        PROJECT_NAME= 'twitter-website' //for image taging  //for Sonarqube Analysis
        DOCKER_HOME_FOLDER= '/var/jenkins_home/tools/org.jenkinsci.plugins.docker.commons.tools.DockerTool/docker/bin/'
        BUILD_NUMBER= 'latest' //for image taging 
    }
    stages {
        //stage('clean workspace'){
        //    steps{
        //        cleanWs()
        //    }
        //}
        stage('Checkout from Git'){
            steps{
                git branch: 'microservice', url: 'https://github.com/Neoop1/twitter-spring-reactjs.git'
            }
        }

        // docker run -d --name sonar -p 9000:9000 sonarqube:lts-community # README - Create SonarQube Token  
        stage("Sonarqube Analysis"){ 
            steps{
                withSonarQubeEnv('sonarqube-server') {
                    sh ''' ${mvn}/bin/mvn clean package verify sonar:sonar -DskipTests -Dsonar.projectName=${PROJECT_NAME} \
                    -Dsonar.projectKey=${PROJECT_NAME} '''
                }
            }
        }
        // # README - Create SonarQube Webhooks  
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }

        stage('Install Dependencies form frontend - for security check') {
            steps {
                dir('./frontend') { 
                    sh "npm config set fetch-retry-mintimeout 20000" // slow internet connection
                    sh "npm config set fetch-retry-maxtimeout 120000" // slow internet connection
                    sh "npm config set legacy-peer-deps true"
                    sh "npm install" //--package-lock
                }
            }
        }

        //TRIVY FS SCAN - Scan a filesystem (such as a host machine, a virtual machine image, or an unpacked container image filesystem).
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }

        // Analysis Complete after 1291 seconds because of frontend dependencies
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan . --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }    

        //build docker containers representative sample for trivy image check

        stage("Docker Build eureka-server for trivy check"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh ''' docker build ./eureka-server/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-eureka-server:${BUILD_NUMBER} '''
                    }
                }
            }
        }

        stage("Docker Build frontend for trivy check"){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                       sh ''' docker build ./frontend/. -t ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-frontend:${BUILD_NUMBER} '''
                    }
                }
            }
        }

       // test docker images with trivy
        stage("TRIVY"){
            steps{
                sh ''' trivy image --format table -o trivy_frontend_image.html ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-frontend:${BUILD_NUMBER}  ''' 
                sh ''' trivy image --format table -o trivy_microservice_image.html ${DOCKER_HUB_USERNAME}/${PROJECT_NAME}-eureka-server:${BUILD_NUMBER} '''
            }
        }
    }

    // Test mail server 
    // docker run -d --rm -p  1080:1080 -p 25:1025 maildev/maildev

    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'test@localhost',                                
            attachmentsPattern: 'trivy-fs-report.html,dependency-check-report.xml,trivy_frontend_image.html,trivy_microservice_image.html'
        }
    }
   
}
