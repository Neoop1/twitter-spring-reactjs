## Networks for Docker Swarm
## docker network create -d overlay spring-swarm
## docker network create -d overlay postgres-swarm
## docker network create -d overlay frontend-swarm-network


services:
    postgres:
        image: postgres
        hostname: postgres
        command: -c 'max_connections=200'
        environment:
            POSTGRES_MULTIPLE_DATABASES: tweet,chat,lists,notification,tag,topic
            POSTGRES_DB: user
            POSTGRES_USER: postgres
            PGUSER: postgres
            POSTGRES_PASSWORD: root
            PGDATA: /data/postgres
        volumes:
            - postgres_prodtest:/data/postgres
            - ./postgres:/docker-entrypoint-initdb.d #POSTGRES_MULTIPLE_DATABASE script 
        #ports:
          # - "5432:5432"
        networks:
            - postgres-swarm
        restart: unless-stopped
        healthcheck:
           test: ["CMD-SHELL", "pg_isready", "-d", "postgres"]
           interval: 30s
           timeout: 60s
           retries: 5
           start_period: 60s 

    minio:
        image: quay.io/minio/minio
        hostname: minio
        command: server /data --console-address ":9001" 
        environment:
            MINIO_ROOT_USER: minio-user
            MINIO_ROOT_PASSWORD: minio-password
        volumes:
            - minio_data:/data
        healthcheck:
           test: ["CMD", "mc", "ready", "local"]
           interval: 5s
           timeout: 5s
           retries: 5   
        #ports:
            #- "9000:9000"
            #- "9001:9001"
        networks:
            - spring-swarm
        restart: unless-stopped
    createbuckets:
        image: minio/mc
        depends_on:
          - minio
        entrypoint: >
           /bin/sh -c "
           /usr/bin/mc alias set twitterminio http://minio:9000 minio-user minio-password;
           /usr/bin/mc mb twitterminio/twitterclonestorage;
           /usr/bin/mc anonymous set public twitterminio/twitterclonestorage;
           exit 0;
           "
        networks:
            - spring-swarm

    pgadmin:
        image: dpage/pgadmin4
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - pgadmin:/var/lib/pgadmin
        #ports:
            #- "5050:80"
        networks:
            - postgres-swarm
        restart: unless-stopped

    zipkin:
        image: openzipkin/zipkin
        hostname: zipkin
        deploy:
           #placement:
              #constraints:
                #- "node.role==worker"
        #ports:
        #    - "9411:9411"
        networks:
            - spring-swarm

    rabbitmq:
        image: rabbitmq:3.9.11-management-alpine
        hostname: rabbitmq
        #deploy:
           #placement:
              #constraints:
                #- "node.role==worker"
        #ports:
        #    - "5672:5672"
        #   - "15672:15672"
        networks:
            - spring-swarm

    zookeeper:
        image: confluentinc/cp-zookeeper:7.0.1
        #container_name: zookeeper
        hostname: zookeeper
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        #ports:
        #    - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - spring-swarm
  

    broker:
        image: confluentinc/cp-kafka:7.0.1
        #container_name: broker
        hostname: broker
        #ports:
        #    - "9092:9092"
        deploy:
           replicas: 1
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        networks:
            - spring-swarm
        #healthcheck:
        #   test: "/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1"
        #   start_period: 60s
        #   interval: 5s
        #   timeout: 120s
        #   retries: 60
        restart: unless-stopped

    cadvisor:
      image: gcr.io/cadvisor/cadvisor
      hostname: cadvisor
      volumes:
        - "/:/rootfs:ro"
        - "/var/run:/var/run:ro"
        - "/sys:/sys:ro"
        - "/var/lib/docker/:/var/lib/docker:ro"
        - "/dev/disk/:/dev/disk:ro"
      #ports:
        #- "8181:8080"
      networks:
        - spring-swarm
        - monitoring-swarm
        - postgres-swarm

    grafana:
        image: neoop1/twitter-grafana
        build:
          context: ./dashboard/grafana/
          dockerfile: Dockerfile
        #container_name: grafana
        hostname: grafana
        #ports:
            #- "3001:3000"
        volumes:
            - grafana_data:/var/lib/grafana
            #- ./grafana:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
            - GF_PATHS_PROVISIONING=/etc/grafana/provisioning/
            - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/dockerswarm-micrometer-spring.json
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=monitoring-swarm"
            - "traefik.http.routers.grafana.entrypoints=web"
            - "traefik.http.routers.grafana.rule=Host(`grafana.twitter.local`)" # grafana.twitter.local -> host file | Cannot be used with prefix like $site/grafana due to conflict with site login            
            - "traefik.http.routers.grafana.service=grafana"
            - "traefik.http.services.grafana.loadbalancer.server.port=3000"

        deploy:   
           replicas: 1
          #placement:
          #  constraints:
          #    - node.role == manager
        networks:
            monitoring-swarm:
                aliases:
                    - grafana

    #docker-api-socat: ## for prometheus - metric from docker sock
    #    container_name: docker-api-socat
    #    image: tecnativa/docker-socket-proxy:0.2
    #    hostname: docker-api-socat
    #    volumes:
    #      - /var/run/docker.sock:/var/run/docker.sock
    #    environment:
    #      NODES: 1
    #      NETWORKS: 1
    #      SERVICES: 1
    #      TASKS: 1
    #    logging:
    #      driver: none
    #    networks:
    #      monitoring-swarm:
    #    #restart: unless-stopped  


    prometheus:
        image: prom/prometheus
        #ports:
           #- "9090:9090"
        user: root #// for - /var/run/docker.sock - security problem
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./dashboard/prometheus-dockerswarm.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
          # - ./prometheus:/prometheus
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.prometheus.rule=Host(`prometheus.twitter.local`)" # prometheus.twitter.local -> host file 
            - "traefik.http.routers.prometheus.entrypoints=web"
            - "traefik.http.routers.prometheus.service=prometheus"

            - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
            - "traefik.docker.network=monitoring-swarm"
            - "traefik.http.routers.prometheus.middlewares=traefik-auth" # admin/password
        deploy:   
           replicas: 1
          #placement:
          #  constraints:
          #    - node.role == manager
        networks:
            monitoring-swarm:
                aliases:
                    - prometheus



    eureka-server:
        image: neoop1/twitter-eureka-server
        build:
          context: ./eureka-server
          dockerfile: Dockerfile
        #container_name: eureka-server
        hostname: eureka-server
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: 'false'
            FETCH_REGISTRY: 'false'
            ZIPKIN_HOST: zipkin
        #ports:
            #- "8761:8761"
        networks:
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: eureka-server
            prometheus-port: 8761
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm
        healthcheck:
          test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
          interval: 20s
          timeout: 5s
          retries: 5
          start_period: 40s
        restart: unless-stopped

    config-server:
        image: neoop1/twitter-config-server:v0.12
        build:
          context: ./config-server
          dockerfile: Dockerfile
        hostname: config-server
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            ZIPKIN_HOST: zipkin
        #ports:
        #    - "8888:8888"
        networks:
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: config-server
            prometheus-port: 8888
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm
        healthcheck:
            test: "curl --fail http://config-server:8888/api-gateway/cloud/config/ || exit 1"
            interval: 20s
            retries: 5
            start_period: 40s
            timeout: 10s   
        restart: unless-stopped

    api-gateway:
        image: neoop1/twitter-api-gateway:latest
        build:
          context: ./api-gateway
          dockerfile: Dockerfile
        hostname: api-gateway
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        #ports:
        #    - ":8000:8000"
        networks:
            - spring-swarm
            - monitoring-swarm 
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=spring-swarm"
            - "traefik.http.routers.backend.entrypoints=web"
            - "traefik.http.services.backend.loadbalancer.server.port=8000"
            - "traefik.http.routers.backend.rule=Host(`twitter.local`) && PathPrefix(`/websocket`) || PathPrefix(`/ui/v1`)"
            - "prometheus-job=api-gateway"
            - "prometheus-port=8000"
            - "prometheus-path=/actuator/prometheus"
            - "prometheus-scrape-network=monitoring-swarm"

        healthcheck:
           test: "curl --fail --silent localhost:8000/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    user-service:
        image: neoop1/twitter-user-service:latest
        build:
          context: ./user-service
          dockerfile: Dockerfile
        hostname: user-service
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            BROKER_HOST: broker
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        labels:
            prometheus-job: user-service
            prometheus-port: 8001
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm   
        #ports:
        #   - "8001:8001"
        networks:
            - postgres-swarm
            - spring-swarm
            - monitoring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8001/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 140s
        restart: unless-stopped

        

    tweet-service:
        image: neoop1/twitter-tweet-service:latest
        build:
          context: ./tweet-service
          dockerfile: Dockerfile
        hostname: tweet-service
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            BROKER_HOST: broker
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #    - "8002:8002"
        networks:
            - postgres-swarm
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: tweet-service
            prometheus-port: 8002
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8002/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped


    topic-service:
        image: neoop1/twitter-topic-service:latest
        build:
          context: ./topic-service
          dockerfile: Dockerfile
        hostname: topic-service
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            BROKER_HOST: broker
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #    - "8003:8003"
        networks:
            - postgres-swarm
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: topic-service
            prometheus-port: 8003
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm 
        healthcheck:
           test: "curl --fail --silent localhost:8003/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped


        

    tag-service:
        image: neoop1/twitter-tag-service:latest
        build:
          context: ./tag-service
          dockerfile: Dockerfile
        hostname: tag-service
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            BROKER_HOST: broker
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #    - "8004:8004"
        networks:
            - postgres-swarm
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: tag-service
            prometheus-port: 8004
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8004/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    lists-service:
        image: neoop1/twitter-lists-service:latest
        build:
          context: ./lists-service
          dockerfile: Dockerfile
        hostname: lists-service
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            BROKER_HOST: broker
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #    - "8005:8005"
        networks:
            - postgres-swarm
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: lists-service
            prometheus-port: 8005
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm  
        healthcheck:
           test: "curl --fail --silent localhost:8005/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped




    chat-service:
        image: neoop1/twitter-chat-service:latest
        build:
          context: ./chat-service
          dockerfile: Dockerfile
        hostname: chat-service
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            BROKER_HOST: broker
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        #ports:
        #    - "8006:8006"
        networks:
            - postgres-swarm
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: chat-service
            prometheus-port: 8006
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8006/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    notification-service:
        image: neoop1/twitter-notification-service:latest
        build:
          context: ./notification-service
          dockerfile: Dockerfile
        hostname: notification-service
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            BROKER_HOST: broker
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        #ports:
        #    - "8007:8007"
        networks:
            - postgres-swarm
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: notification-service
            prometheus-port: 8007
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8007/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped

    email-service:
        image: neoop1/twitter-email-service:latest
        build:
          context: ./email-service
          dockerfile: Dockerfile
        hostname: email-service
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            BROKER_HOST: broker
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        #ports:
        #    - "8020:8020"
        networks:
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: email-service
            prometheus-port: 8020
            prometheus-path: /actuator/prometheus 
            prometheus-scrape-network: monitoring-swarm  
        healthcheck:
           test: "curl --fail --silent localhost:8020/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped


    image-service:
        image: neoop1/twitter-image-service:latest
        build:
          context: ./image-service
          dockerfile: Dockerfile
        hostname: image-service
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        #ports:
        #    - "8021:8021"
        networks:
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: image-service
            prometheus-port: 8021
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8021/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    websocket-service:
        image: neoop1/twitter-websocket-service:latest
        build:
          context: ./websocket-service
          dockerfile: Dockerfile
        hostname: websocket-service
        environment:
            EUREKA_HOST: eureka-server
            EUREKA_DEFAULT_ZONE: "http://eureka-server:8761/eureka"
            REGISTER_WITH_EUREKA: "true"
            FETCH_REGISTRY: "true"
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        deploy:
           replicas: 1
           #placement:
              #constraints:
                #- "node.role==worker"
        #ports:
        #    - "8022:8022"
        networks:
            - spring-swarm
            - monitoring-swarm
        labels:
            prometheus-job: websocket-service
            prometheus-port: 8022
            prometheus-path: /actuator/prometheus
            prometheus-scrape-network: monitoring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8022/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped

    #nginxproxy:
    #    image: neoop1/twitter-nginxproxy-service:v0.7
    #    build:
    #      context: ./nginxproxy
    #      dockerfile: Dockerfile
    #    hostname: nginxproxy
    #    networks:
    #        - spring-swarm
    #        - frontend-swarm-network
    #    ports:
    #      - "80:80"

    traefik:
        image: docker.io/library/traefik:v3.1.1
        container_name: traefik
        ports:
          - 80:80
        # - 443:443
        # (Optional) Enable Dashboard, don't do in production
          - 8088:8080
        command:
           - "--api.dashboard=true" # (Optional) Enable Dashboard, don't do in production
           - "--api.insecure=true"  # (Optional) Enable Dashboard, don't do in production

           - "--providers.docker"  
           - "--providers.docker.exposedbydefault=false" # (Optional) Enable this, if you want to expose all containers automatically

           - "--entrypoints.web.address=:80"

           - "--metrics.prometheus=true"
           - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"

          #- --entrypoints.web.http.redirections.entrypoint.to=frontend-secure
          #- --entrypoints.web.http.redirections.entrypoint.scheme=https
          #- --entrypoints.web.http.redirections.entrypoint.permanent=true
          #- --entrypoints.frontend-secure.address=:443


        labels:

           - "traefik.enable=true"
           - "traefik.http.routers.traefik-ui.service=api@internal"
           - "traefik.http.routers.traefik-ui.rule=Host(`traefik.twitter.local`)" # traefik.twitter.local -> host file 
           - "traefik.http.services.traefik-ui.loadbalancer.server.port=8080"


        ## //auth when connect to traefik Dashboard
           - "traefik.http.routers.traefik-ui.middlewares=traefik-auth"     
           - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$vO3/IDvg$$JrbhU9NSQub83/mQu9/fP1" # admin/password

          #- "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}" #.env file 
          #- "traefik.http.middlewares.traefik-auth.basicauth.removeheader=true"

        volumes:
           - /run/docker.sock:/run/docker.sock:ro
        #  - ./traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
        #  - ./traefik/conf/:/etc/traefik/conf/
        #  - ./traefik/certs/:/etc/traefik/certs/
        #environment:
        #   - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
        #deploy:
           #mode: global
           #placement:
              #constraints:
                #- node.role == manager
        networks:
           - spring-swarm
           - monitoring-swarm
           - frontend-swarm-network
        restart: unless-stopped

    frontend:   
        image: neoop1/twitter-frontend:v0.10
        build:
          context: ./frontend
          dockerfile: Dockerfile
        hostname: frontend
        #ports:
        #    - "3000:3000"
        networks:
            - spring-swarm
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=spring-swarm"
            - "traefik.http.routers.frontend.entrypoints=web"

            - "traefik.http.services.frontend.loadbalancer.server.port=80"
            - "traefik.http.routers.frontend.rule=Host(`twitter.local`)"
      
            #- traefik.http.routers.frontend.entrypoints=frontend-secure
            #- traefik.http.routers.frontend.rule=Host(`twitter.local`)
            #- traefik.http.routers.frontend.tls=true
        




networks:
    postgres-swarm:
        #driver: bridge
        #external: true
        driver: overlay
        internal: true

    spring-swarm:
        #external: true
        #driver: bridge
        driver: overlay
        internal: true

    monitoring-swarm:
        #external: true
        #driver: bridge
        driver: overlay
        internal: true

    frontend-swarm-network:
        driver: bridge
        external: true

volumes:
    postgres_prodtest:
    pgadmin:
    minio_data:
    prometheus_data:
    grafana_data:
