services:
    postgres:
        #container_name: postgres
        image: postgres
        hostname: postgres
        command: -c 'max_connections=200'
        environment:
            POSTGRES_MULTIPLE_DATABASES: tweet,chat,lists,notification,tag,topic
            POSTGRES_DB: user
            POSTGRES_USER: postgres
            PGUSER: postgres
            POSTGRES_PASSWORD: root
            PGDATA: /data/postgres
        volumes:
            - postgres_prodtest:/data/postgres
            - ./postgres:/docker-entrypoint-initdb.d #POSTGRES_MULTIPLE_DATABASE script 
        ports:
            - "5432:5432"
        networks:
            - postgres-swarm
        restart: unless-stopped
        healthcheck:
           test: ["CMD-SHELL", "pg_isready", "-d", "postgres"]
           interval: 30s
           timeout: 60s
           retries: 5
           start_period: 60s 

    minio:
        #container_name: minio
        image: quay.io/minio/minio
        hostname: minio
        command: server /data --console-address ":9001" 
        environment:
            MINIO_ROOT_USER: minio-user
            MINIO_ROOT_PASSWORD: minio-password
        volumes:
            - minio_data:/data
        healthcheck:
           test: ["CMD", "mc", "ready", "local"]
           interval: 5s
           timeout: 5s
           retries: 5   
        ports:
            - "9000:9000"
            - "9001:9001"
        networks:
            - spring-swarm
        restart: unless-stopped
    createbuckets:
        image: minio/mc
        depends_on:
          - minio
        entrypoint: >
           /bin/sh -c "
           /usr/bin/mc alias set twitterminio http://minio:9000 minio-user minio-password;
           /usr/bin/mc mb twitterminio/twitterclonestorage;
           /usr/bin/mc anonymous set public twitterminio/twitterclonestorage;
           exit 0;
           "
        networks:
            - spring-swarm

    pgadmin:
        #container_name: pgadmin
        image: dpage/pgadmin4
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - pgadmin:/var/lib/pgadmin
        ports:
            - "5050:80"
        networks:
            - postgres-swarm
        restart: unless-stopped

    zipkin:
        image: openzipkin/zipkin
        hostname: zipkin
        #container_name: zipkin
        deploy:
           placement:
              constraints:
                - "node.role==worker"
        #ports:
        #    - "9411:9411"
        networks:
            - spring-swarm

    rabbitmq:
        image: rabbitmq:3.9.11-management-alpine
        #container_name: rabbitmq
        hostname: rabbitmq
        deploy:
           placement:
              constraints:
                - "node.role==worker"
        #ports:
        #    - "5672:5672"
        #   - "15672:15672"
        networks:
            - spring-swarm

    zookeeper:
        image: confluentinc/cp-zookeeper:7.0.1
        #container_name: zookeeper
        hostname: zookeeper
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        #ports:
        #    - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - spring-swarm
  

    broker:
        image: confluentinc/cp-kafka:7.0.1
        #container_name: broker
        hostname: broker
        #ports:
        #    - "9092:9092"
        deploy:
           replicas: 1
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        networks:
            - spring-swarm
        #healthcheck:
        #   test: "/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1"
        #   start_period: 60s
        #   interval: 5s
        #   timeout: 120s
        #   retries: 60
        restart: unless-stopped

    grafana:
        image: neoop1/twitter-grafana
        build:
          context: ./dashboard/grafana/
          dockerfile: Dockerfile
        #container_name: grafana
        hostname: grafana
        ports:
            - "3001:3000"
        volumes:
            - grafana_data:/var/lib/grafana
            #- ./grafana:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        networks:
            monitoring-swarm:
                aliases:
                    - grafana
    prometheus:
        image: prom/prometheus
        #container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./dashboard/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
           # - ./prometheus:/prometheus
        networks:
            monitoring-swarm:
                aliases:
                    - prometheus
    eureka-server:
        image: neoop1/twitter-eureka-server
        build:
          context: ./eureka-server
          dockerfile: Dockerfile
        #container_name: eureka-server
        hostname: eureka-server
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            ZIPKIN_HOST: zipkin
        ports:
            - "8761:8761"
        networks:
            - spring-swarm
        healthcheck:
          test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
          interval: 20s
          timeout: 5s
          retries: 5
          start_period: 40s
        restart: unless-stopped

    config-server:
        image: neoop1/twitter-config-server:v0.8
        build:
          context: ./config-server
          dockerfile: Dockerfile
        hostname: config-server
        deploy:
           replicas: 2
           placement:
              constraints:
                - "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            ZIPKIN_HOST: zipkin
        #ports:
        #    - "8888:8888"
        networks:
            - spring-swarm
        healthcheck:
            test: "curl --fail http://config-server:8888/api-gateway/cloud/config/ || exit 1"
            interval: 20s
            retries: 5
            start_period: 40s
            timeout: 10s   
        restart: unless-stopped

    api-gateway:
        image: neoop1/twitter-api-gateway:latest
        build:
          context: ./api-gateway
          dockerfile: Dockerfile
        hostname: api-gateway
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        #ports:
        #    - ":8000:8000"
        networks:
            - spring-swarm 
        healthcheck:
           test: "curl --fail --silent localhost:8000/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    user-service:
        image: neoop1/twitter-user-service:latest
        build:
          context: ./user-service
          dockerfile: Dockerfile
        #container_name: user-service
        hostname: user-service
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #   - "8001:8001"
        networks:
            - postgres-swarm
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8001/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 140s
        restart: unless-stopped

        

    tweet-service:
        image: neoop1/twitter-tweet-service:latest
        build:
          context: ./tweet-service
          dockerfile: Dockerfile
        #container_name: tweet-service
        hostname: tweet-service
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #    - "8002:8002"
        networks:
            - postgres-swarm
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8002/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped


    topic-service:
        image: neoop1/twitter-topic-service:latest
        build:
          context: ./topic-service
          dockerfile: Dockerfile
        #container_name: topic-service
        hostname: topic-service
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #    - "8003:8003"
        networks:
            - postgres-swarm
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8003/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped


        

    tag-service:
        image: neoop1/twitter-tag-service:latest
        build:
          context: ./tag-service
          dockerfile: Dockerfile
        #container_name: tag-service
        hostname: tag-service
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #    - "8004:8004"
        networks:
            - postgres-swarm
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8004/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    lists-service:
        image: neoop1/twitter-lists-service:latest
        build:
          context: ./lists-service
          dockerfile: Dockerfile
        #container_name: lists-service
        hostname: lists-service
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        #ports:
        #    - "8005:8005"
        networks:
            - postgres-swarm
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8005/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped




    chat-service:
        image: neoop1/twitter-chat-service:latest
        build:
          context: ./chat-service
          dockerfile: Dockerfile
        #container_name: chat-service
        hostname: chat-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        #ports:
        #    - "8006:8006"
        networks:
            - postgres-swarm
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8006/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    notification-service:
        image: neoop1/twitter-notification-service:latest
        build:
          context: ./notification-service
          dockerfile: Dockerfile
        #container_name: notification-service
        hostname: notification-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            DATASOURCE_HOST: postgres
            ZIPKIN_HOST: zipkin
            RABBITMQ_HOST: rabbitmq
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        #ports:
        #    - "8007:8007"
        networks:
            - postgres-swarm
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8007/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    email-service:
        image: neoop1/twitter-email-service:latest
        build:
          context: ./email-service
          dockerfile: Dockerfile
        #container_name: email-service
        hostname: email-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        #ports:
        #    - "8020:8020"
        networks:
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8020/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped


    image-service:
        image: neoop1/twitter-image-service:latest
        build:
          context: ./image-service
          dockerfile: Dockerfile
        #container_name: image-service
        hostname: image-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        #ports:
        #    - "8021:8021"
        networks:
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8021/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped



    websocket-service:
        image: neoop1/twitter-websocket-service:latest
        build:
          context: ./websocket-service
          dockerfile: Dockerfile
        #container_name: websocket-service
        hostname: websocket-service
        environment:
            EUREKA_HOST: eureka-server
            CONFIG_SERVER_HOST: config-server
            ZIPKIN_HOST: zipkin
        deploy:
           replicas: 1
           placement:
              constraints:
                - "node.role==worker"
        #ports:
        #    - "8022:8022"
        networks:
            - spring-swarm
        healthcheck:
           test: "curl --fail --silent localhost:8022/actuator/health | grep UP || exit 1"
           interval: 20s
           timeout: 5s
           retries: 5
           start_period: 40s
        restart: unless-stopped

 

    nginxproxy:
        image: neoop1/twitter-nginxproxy-service:v0.5
        build:
          context: ./nginxproxy
          dockerfile: Dockerfile
        #container_name: nginxproxy
        hostname: nginxproxy
        networks:
            - spring-swarm
        ports:
          - "80:80"


    frontend:   
        image: neoop1/twitter-frontend:v0.8
        build:
          context: ./frontend
          dockerfile: Dockerfile
        #container_name: frontend
        hostname: frontend
        environment:
           SITE_HOST_NAME: twitter.local
        #ports:
        #    - "3000:3000"
        networks:
            - spring-swarm

        




networks:
    postgres-swarm:
        driver: bridge
        external: true

    spring-swarm:
        driver: bridge
        external: true
    monitoring-swarm:

volumes:
    postgres_prodtest:
    pgadmin:
    minio_data:
    prometheus_data:
    grafana_data:
